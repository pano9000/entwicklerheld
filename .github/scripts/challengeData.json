{
  "baseUrlEH": "https://platform.entwicklerheld.de/challenge/",
  "baseUrlSolution": "https://github.com/pano9000/entwicklerheld/tree/main/",
  "challengeData": [
    {
      "id": "anagram",
      "idEH": "ffa242b6-5210-454d-9a83-c9b28ccd024a",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-04-24",
      "description": "Goal is to create a function that checks, if two given words are anagrams, i.e. if they consist of the identical letter set, but are differently arranged (e.g. `car` and `arc`)",
      "comment": ""
    },
    {
      "id": "fizzbuzz",
      "idEH": "9c778212-5cf0-4b5d-b2b5-49bea7eb1d53",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-04-24",
      "description":"Goal is to create a function that:\\\\n* returns \\'fizz\\', when given number is divisble by 3\\\\n* returns \\'buzz\\', when given number is divisible by 5\\\\n* returns \\'fizzbuzz\\', when given number is divisble be 3 AND 5",
      "comment": ""
    },
    {
      "id": "pascals-triangle",
      "idEH": "d2576da1-da59-4e04-b92e-fdfb3bebaf74",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-04-27",
      "description": "",
      "comment": ""
    },
    {
      "id": "scary-javascript",
      "idEH": "ca1a53ff-feb5-46cb-9e41-e51c2c9b39c0",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-04-27",
      "description": "Goal was to mainly fix some \"common Javascript mistakes\" in the given code, relating to scope, type coercion, etc.",
      "comment": ""
    },
    {
      "id": "bricks-and-water",
      "idEH": "e8843f3a-a0e2-4c8b-9116-f05c547a0c3f",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-05-01",
      "description": "",
      "comment": ""
    },
    {
      "id": "tv-channel",
      "idEH": "5848a48b-928e-4f16-a13a-75274eb4217d",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-05-01",
      "description": "",
      "comment": ""
    },
    {
      "id": "personal-data-safety",
      "idEH": "23b90f45-503b-413c-8dc1-a98875109ae3",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-05-02",
      "description": "Goal is to create a function that gets the personal data of a given `user_id`, and returns it either masked, or unmasked, depending on status of authentication.",
      "comment": "Challenge was not in Javascript, but PHP, but I gave it a shot anyways. I'm not a PHP guy, so the solution might be clumsy."
    },
    {
      "id": "easter-challenge-2022",
      "idEH": "264f37cd-9b4d-4c4c-9df9-02e4c5569485",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-06-02",
      "description": "Goal is to create a function that can calculate the Easter holidays for any given year",
      "comment": "Challenge was not in Javascript, but PHP, but I gave it a shot anyways. I'm not a PHP guy, so the solution might be clumsy."
    },
    {
      "id": "climbing-stairs",
      "idEH": "bef5af2e-3970-40c1-9522-da75e87557da",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-06-06",
      "description": "Goal is to return all different ways are there to get up a given amount of steps, when you can take either 1 or 2 steps at a time.",
      "comment": "Originally tried to solve it with an iterative approach, but failed back then for some reason, so then instead went for a recursive solution finally."
    },
    {
      "id": "advent-bakery",
      "idEH": "96f91238-70cb-43de-8710-c1cd2bdf380b",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-06-16",
      "description": "Goal was to return a list of all different (unique) possibilites on how a given amount of cookies can be placed on a given amount of plates.",
      "comment": "Solved this mainly incorporating a recursive function"
    },
    {
      "id": "matching-clients",
      "idEH": "723ff65f-60b4-417b-9a34-170d0a085332",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-06-19",
      "description": "The goal is to create an algorithm for finding and merging \"similar clients\", based on the provided client information (first name, last name, phone, etc.).\\nE.g. when a user creates a new account the provided information should be checked and determine, if they are indeed a new user, or if we can find an already existing matching account for that user.\\nDepending on that either create or update the client in the  \"Client Database\".\\nBonus task is to also implement a \"fuzzy/soft matching\" to also detect and match clients even with typos or small deviations in the client info.",
      "comment": "Interesting challenge, overall. The \"fuzzy/soft matching\" part was a a bit more challenging, due to the fact that you would need to somehow match smaller typos with the correct entry. My solution for that was to incorporate `Levenshtein Distance` calculations, which calculates the difference between two strings, and allowed to do some \"soft matching\" this way."
    },
    {
      "id": "happy-subnetting",
      "idEH": "8d0128ba-5751-434a-b5c5-63fa3fac9d0b",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-09-19",
      "description": "",
      "comment": "In retrospect, my approach to solve this was a bit crude, especially in regards to all of those bit calculations. Using actual bit shifting would probably have been a better/nicer/faster approach."
    },
    {
      "id": "cinema-seat-reservation",
      "idEH": "cd14ba5e-a1f3-4b78-b770-bea57a23db7a",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-10-08",
      "description": "",
      "comment": "Difficult challenge because of some \"special\" requirements, when the seats needed to be moved, which felt a bit arbitrary at times."
    },
    {
      "id": "mails-to-santa",
      "idEH": "71871b6f-d373-4f24-8283-183c883d3249",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-10-11",
      "description": "Goal is to create a function that checks if a given email is received within predefined business hours/days. If that is not the case the function should return the next \"possible\" delivery date (i.e. the next business hours).",
      "comment": ""
    },
    {
      "id": "perfect-place",
      "idEH": "2eaf5777-2520-4a3a-9a63-e8babb182250",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-12-18",
      "description": "Goal here was to find the optimal places to place a varying amount of \"ATMs\" within a given `Region`, with multiple `Citys`. The idea is to distribute the ATMs in the Region's Cities in a way which will make sure that the distances between a city and an ATM are kept to a minimum.",
      "comment": "The `City.js` and `Region.js` classes were kindly already provided by the challenge. Actual solution is in `perfect-place.js`"
    },
    {
      "id": "build-a-clock",
      "idEH": "9a6c3e5d-71d6-493c-8f78-9bcbd239e930",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-05-07",
      "description": "In this challenge you will built a simple clock. Your clock can show the time, add and subtract minutes and it can decide if it is equal to another one.",
      "comment": ""
    },
    {
      "id": "matching-brackets",
      "idEH": "d1acd154-b68f-4104-a360-f77d2186fae1",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-05-24",
      "description": "",
      "comment": ""
    },
    {
      "id": "reverse-sms",
      "idEH": "0e9e7bff-0997-4e73-a0ed-8c8e6ab1603f",
      "urlEH": "",
      "urlSolution": "reverse-sms-javascript",
      "dateSolved": "2023-06-23",
      "description": "Challenge consists of essentially creating a function to reverse provided text and counting the palindromes inside that text, and using the Twilio client to \"send\" that info as SMS. Second part was to implement a function that is run, when Twilio calls a webhook, that reverses and then sends the received information from the webhook.",
      "comment": ""
    },
    {
      "id": "flatten-arrays",
      "idEH": "e52b127d-c6f0-43e7-94d5-3986f0fd9c3b",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-06-26",
      "description": "Given a nested list, flatten it to a single-level list by removing any nesting.",
      "comment": ""
    },
    {
      "id": "scary-python",
      "idEH": "26dd4f5a-5550-4470-8299-d32097e301b3",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-06-27",
      "description": "",
      "comment": ""
    },
    {
      "id": "say-numbers",
      "idEH": "447258e0-816a-4f6c-b0d0-e83e5c2522b1",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-06-30",
      "description": "Goal was to convert numbers/integers into the English words for that number, e.g. 1000 -> \"one thousand\"",
      "comment": "It was my first time meddling around with Java, so I \"prototyped\" the solution offline in JavaScript first and then \"adapted\" this to Java. "
    },
    {
      "id": "gdv-extraction",
      "idEH": "2ed404b3-de27-4c67-8a8e-46a4633443c8",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-02",
      "description": "Build a simple parser for some of the fields in the GDV format, a file format used by 'Gesamtverband der Deutschen Versicherungswirtschaft' for exchanging information in Germany's insurance industry.",
      "comment": ""
    },
    {
      "id": "pizza-for-my-friends",
      "idEH": "5d0fe499-4832-4f88-82b6-0a4a57a69fb3",
      "urlEH": "",
      "urlSolution": "pizza-for-my-friends",
      "dateSolved": "2023-07-04",
      "description": "Goal of the challenge was to create two functions: One that matches a list of pizzas with different toppings against a list of persons with certain likes/dislikes.\\nThe other function was essentially the same, but the other way around: Matching a list of persons against a pizza's different toppings, to determine, which persons might like that particular pizza.",
      "comment": "This was promoted as a \"JavaScript (React)\" challenge, but the React part of the challenge was tiny, the more interesting part was the friends/pizza/toppings matching part, which was easily done.\\nI only had a hard time trying to refactor the first non-DRY solution, but I did manage in the end."
    },
    {
      "id": "non-repeating-characters",
      "idEH": "5aa72009-4eda-4e2c-a1b4-ff0f5e6c230f",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-05",
      "description": "Write a function that returns the first letter in a string, which is not repeated in the rest of the string",
      "comment": ""
    },
    {
      "id": "iot-office-sensors",
      "idEH": "1b96364d-e20a-47b7-a302-1bd985add1fd",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-07",
      "description": "Goal was to work with byte data and converting these to integer values, taking care of unsigned/signed differences and different byte lengths",
      "comment": "Interesting look into working with bitshifting and the signed/unsigned topic :-)"
    },
    {
      "id": "change-calculator",
      "idEH": "45514206-0b93-484b-a63c-aab14548a21f",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-11",
      "description": "Goal was to calculate the minimum number of coins required to give out a certain amount of change.",
      "comment": "Quickly recognized the problem to be solveable by a \"best sum\" dynamic programming approach, which I then implemented and also included memoization, to improve performance"
    },
    {
      "id": "state-machine",
      "idEH": "de745794-96d4-43d8-8117-7c345161991e",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-11",
      "description": "Goal was to implement a simple \"State Machine\" that checks the next allowed transitions from state to state. The second part included implementing an IBAN checksum checker, that was used to then control, if the transition to the next state was allowed.",
      "comment": ""
    },
    {
      "id": "storing-vehicle-data",
      "idEH": "91fb6cb8-3fca-4f3b-a368-d576a608ace3",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-14",
      "description": "Challenge consisted of two parts (\"stages\"), which involved working with a SQLite database and storing/retrieving data related to VIN (Vehicle Identification Number) and later also optimizing database file size for \"embedded devices\".",
      "comment": "\"Stage 1\" was easily solved after reading the docs, on how to work with SQLite and Java.\\n\"Stage 2\" was a lot more tricky, as it involved the requirement to minimize the database size – which involved some creative tricks, which Entwicklerheld also hinted at in their description.\\nFirst attempt to save space by splitting up the VIN into its 3 parts (WMI, VDS and VIS) and saving these in separate tables, referencing only the row IDs of the \"less unique\" WMI and VDS parts, did not properly work for this scenario, as the additional page sizes of these tables was inflating the database size quite a bit.\\nI do believe, that in a production environment, splitting it up would be the correct way to go, as the test cases here, were only limited to 999 entries.\\nSecond attempt was then to use a custom character encoding map, as the VIN consist of a `0-9`, `A-Z` - minus the letters `I`, `O`, `Q` -> character set of 33 characters.\\nThis would fit into 6 bits, which I tried to store as BLOB, but unfortunately the smallest size SQLite can save is 1 byte.\\nSo instead went with storing the VIN encoded as integers, which did save enough space for the challenge to go through.\\n"
    },
    {
      "id": "maps-and-polygons",
      "idEH": "3f237f37-6776-4e8b-a12a-378749f3e97f",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-20",
      "description": "Challenge consists of two scenarios:\\n1) Was to calculate the area of a given (irregular) polygon\\n2) Placing a label on a map for each of the given polygons - following certain rules, like e.g. the label not being allowed to touch the polygon and not being allowed to be \"outside\" of the map\\n",
      "comment": "Interesting challenge for me, as I did not really pay any attention during my Maths classes :-).\\nThe first scenario was nevertheless easily solved after finding out about the `Shoelace Algorithm/Formula`, which I just needed to turn into Java code.\\nThe second scenario was the more challenging one, as it involved finding a way to detect \"collisions\" between the label and the polygon and the map borders.\\n"
    },
    {
      "id": "binary-tree",
      "idEH": "47c12f34-a402-4f83-b958-cdcef262a32f",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-28",
      "description": "Challenge consisted of working with binary trees and three scenarios:\\n1) Print a binary tree in a 'helpful' way\\n2) Compare and check if two trees are identical\\n3) Reverse/Mirror a given binary tree",
      "comment": "I opted to try to solve the challenge with the use of a JavaScript generator that prints out every next value, Breadth First.\\nThis made a few things more optimal, e.g. the checking of equalness this way can actually return early, if a difference is detected at the current nodes.\\nFor printing the tree I created a helper class that calculates and prints the given treenode values in a 'centered' fashion.\\nUnrelated to the task, I also found a XSS vulnerability in the tasks Tests, which was reported to EntwicklerHeld."
    },
    {
      "id": "rest-api",
      "idEH": "f54f8d24-ff39-47db-a9aa-60f85a280040",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-08-04",
      "description": "Challenge consisted of creating a 'REST' API that handles the different HTTP methods, like `GET`, `POST`, `DELETE`, `PATCH`.",
      "comment": "Having worked with Node.js/Express.js on a few REST-like APIs before, I was used to a certain workflow there, that I was not able to replicate here, due to the constraints of needing to have everything in one class. In a real world example, this would ideally be split into e.g. a routing part, a controller part and a validation step.\\nIt was also a bit interesting to see, how to handle JSON data outside of JavaScript.\\nAnyways my Java solution can be found in the 'IOUApi.java' file.  "
    },
    {
      "id": "fizz-buzz-without-if",
      "idEH": "6b74ccff-00ee-4325-9bc7-b556ab5a10ea",
      "urlEH": "",
      "urlSolution": "fizzbuzz-without-if",
      "dateSolved": "2023-08-07",
      "description": "Well known FizzBuzz challenge, but with a slight constraint of not using 'if' statements :-)",
      "comment": ""
    },
    {
      "id": "keyword-extractor",
      "idEH": "16b518c4-88a0-4b40-9155-bec0c34e2fff",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-08-16",
      "description": "Challenge consisted of extracting 'keywords' from a text, by using 'Term Frequency Inverse Document Frequency (TF-IDF)'",
      "comment": ""
    },
    {
      "id": "document-scan",
      "idEH": "df564e15-d105-4ef9-8e7d-9301b6ee49a9",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-09-03",
      "description": "Challenge consisted of extracting an Address from a scanned document. The scanned document was provided in form of an Array of 'boxed' Characters, e.g. with X/Y points.\\nThe first scenario was the 'easy' mode, which only contained perfectly aligned scans. The challenge allowed for a 'hard' mode, which also included scans, that were not correctly aligned, e.g. the letters were skewed slightly, either going up or down.",
      "comment": "The easy mode was quickly solved, but I went for the 'hard' mode, which was quite a bit more challenging and required to throw away my first solution, that worked for the easy mode. Finally I ended up with a solution that groups the characters in Columns by their X position, then for each value of the first column, iterates through all the other columns to check, if the letter belongs to the same row, by calculating some distances between X/Y of the current and following characters.\\nThere are some issues with the solution still though, if we look at the real world, as e.g. in a wrongly scanned document, the X values of the rows would not be perfectly aligned, which is what the solution currently assumes. It also only works for Left-To-Right and Left-Aligned text."
    },
    {
      "id": "bowling",
      "idEH": "259907f0-9815-4193-9796-7868836042a6",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-09-15",
      "description": "Challenge consisted basically of creating a Bowling Score Counter, that keeps track of the knocked off pins and returns a total score at the end.",
      "comment": ""
    },
    {
      "id": "ip-location-powershell",
      "idEH": "a1d73f9e-8bc4-47ba-b89a-0489bab988fe",
      "urlEH": "",
      "urlSolution": "ip-location-powershell",
      "dateSolved": "2023-10-09",
      "description": "Challenge consisted of creatign a Powershell script that reads IP addresses from a file, sends these to an external IP Lookup service and then output that information as a CSV.",
      "comment": ""
    }
  ]
}