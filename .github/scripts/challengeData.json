{
  "baseUrlEH": "https://platform.entwicklerheld.de/challenge/",
  "baseUrlSolution": "https://github.com/pano9000/entwicklerheld/tree/main/",
  "challengeData": [
    {
      "id": "anagram",
      "idEH": "ffa242b6-5210-454d-9a83-c9b28ccd024a",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-04-24",
      "description": "Goal is to create a function that checks, if two given words are anagrams, i.e. if they consist of the identical letter set, but are differently arranged (e.g. `car` and `arc`)",
      "comment": ""
    },
    {
      "id": "fizzbuzz",
      "idEH": "9c778212-5cf0-4b5d-b2b5-49bea7eb1d53",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-04-24",
      "description":"Goal is to create a function that:\\\\n* returns \\'fizz\\', when given number is divisble by 3\\\\n* returns \\'buzz\\', when given number is divisible by 5\\\\n* returns \\'fizzbuzz\\', when given number is divisble be 3 AND 5",
      "comment": ""
    },
    {
      "id": "pascals-triangle",
      "idEH": "d2576da1-da59-4e04-b92e-fdfb3bebaf74",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-04-27",
      "description": "",
      "comment": ""
    },
    {
      "id": "scary-javascript",
      "idEH": "ca1a53ff-feb5-46cb-9e41-e51c2c9b39c0",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-04-27",
      "description": "Goal was to mainly fix some \"common Javascript mistakes\" in the given code, relating to scope, type coercion, etc.",
      "comment": ""
    },
    {
      "id": "bricks-and-water",
      "idEH": "e8843f3a-a0e2-4c8b-9116-f05c547a0c3f",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-05-01",
      "description": "",
      "comment": ""
    },
    {
      "id": "tv-channel",
      "idEH": "5848a48b-928e-4f16-a13a-75274eb4217d",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-05-01",
      "description": "",
      "comment": ""
    },
    {
      "id": "personal-data-safety",
      "idEH": "23b90f45-503b-413c-8dc1-a98875109ae3",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-05-02",
      "description": "Goal is to create a function that gets the personal data of a given `user_id`, and returns it either masked, or unmasked, depending on status of authentication.",
      "comment": "Challenge was not in Javascript, but PHP, but I gave it a shot anyways. I'm not a PHP guy, so the solution might be clumsy."
    },
    {
      "id": "easter-challenge-2022",
      "idEH": "264f37cd-9b4d-4c4c-9df9-02e4c5569485",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-06-02",
      "description": "Goal is to create a function that can calculate the Easter holidays for any given year",
      "comment": "Challenge was not in Javascript, but PHP, but I gave it a shot anyways. I'm not a PHP guy, so the solution might be clumsy."
    },
    {
      "id": "climbing-stairs",
      "idEH": "bef5af2e-3970-40c1-9522-da75e87557da",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-06-06",
      "description": "Goal is to return all different ways are there to get up a given amount of steps, when you can take either 1 or 2 steps at a time.",
      "comment": "Originally tried to solve it with an iterative approach, but failed back then for some reason, so then instead went for a recursive solution finally."
    },
    {
      "id": "advent-bakery",
      "idEH": "96f91238-70cb-43de-8710-c1cd2bdf380b",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-06-16",
      "description": "Goal was to return a list of all different (unique) possibilites on how a given amount of cookies can be placed on a given amount of plates.",
      "comment": "Solved this mainly incorporating a recursive function"
    },
    {
      "id": "matching-clients",
      "idEH": "723ff65f-60b4-417b-9a34-170d0a085332",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-06-19",
      "description": "The goal is to create an algorithm for finding and merging \"similar clients\", based on the provided client information (first name, last name, phone, etc.).\\nE.g. when a user creates a new account the provided information should be checked and determine, if they are indeed a new user, or if we can find an already existing matching account for that user.\\nDepending on that either create or update the client in the  \"Client Database\".\\nBonus task is to also implement a \"fuzzy/soft matching\" to also detect and match clients even with typos or small deviations in the client info.",
      "comment": "Interesting challenge, overall. The \"fuzzy/soft matching\" part was a a bit more challenging, due to the fact that you would need to somehow match smaller typos with the correct entry. My solution for that was to incorporate `Levenshtein Distance` calculations, which calculates the difference between two strings, and allowed to do some \"soft matching\" this way."
    },
    {
      "id": "happy-subnetting",
      "idEH": "8d0128ba-5751-434a-b5c5-63fa3fac9d0b",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-09-19",
      "description": "",
      "comment": "In retrospect, my approach to solve this was a bit crude, especially in regards to all of those bit calculations. Using actual bit shifting would probably have been a better/nicer/faster approach."
    },
    {
      "id": "cinema-seat-reservation",
      "idEH": "cd14ba5e-a1f3-4b78-b770-bea57a23db7a",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-10-08",
      "description": "",
      "comment": "Difficult challenge because of some \"special\" requirements, when the seats needed to be moved, which felt a bit arbitrary at times."
    },
    {
      "id": "mails-to-santa",
      "idEH": "71871b6f-d373-4f24-8283-183c883d3249",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-10-11",
      "description": "Goal is to create a function that checks if a given email is received within predefined business hours/days. If that is not the case the function should return the next \"possible\" delivery date (i.e. the next business hours).",
      "comment": ""
    },
    {
      "id": "perfect-place",
      "idEH": "2eaf5777-2520-4a3a-9a63-e8babb182250",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2022-12-18",
      "description": "Goal here was to find the optimal places to place a varying amount of \"ATMs\" within a given `Region`, with multiple `Citys`. The idea is to distribute the ATMs in the Region's Cities in a way which will make sure that the distances between a city and an ATM are kept to a minimum.",
      "comment": "The `City.js` and `Region.js` classes were kindly already provided by the challenge. Actual solution is in `perfect-place.js`"
    },
    {
      "id": "build-a-clock",
      "idEH": "9a6c3e5d-71d6-493c-8f78-9bcbd239e930",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-05-07",
      "description": "In this challenge you will built a simple clock. Your clock can show the time, add and subtract minutes and it can decide if it is equal to another one.",
      "comment": ""
    },
    {
      "id": "matching-brackets",
      "idEH": "d1acd154-b68f-4104-a360-f77d2186fae1",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-05-24",
      "description": "",
      "comment": ""
    },
    {
      "id": "reverse-sms",
      "idEH": "0e9e7bff-0997-4e73-a0ed-8c8e6ab1603f",
      "urlEH": "",
      "urlSolution": "reverse-sms-javascript",
      "dateSolved": "2023-06-23",
      "description": "Challenge consists of essentially creating a function to reverse provided text and counting the palindromes inside that text, and using the Twilio client to \"send\" that info as SMS. Second part was to implement a function that is run, when Twilio calls a webhook, that reverses and then sends the received information from the webhook.",
      "comment": ""
    },
    {
      "id": "flatten-arrays",
      "idEH": "e52b127d-c6f0-43e7-94d5-3986f0fd9c3b",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-06-26",
      "description": "Given a nested list, flatten it to a single-level list by removing any nesting.",
      "comment": ""
    },
    {
      "id": "scary-python",
      "idEH": "26dd4f5a-5550-4470-8299-d32097e301b3",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-06-27",
      "description": "",
      "comment": ""
    },
    {
      "id": "say-numbers",
      "idEH": "447258e0-816a-4f6c-b0d0-e83e5c2522b1",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-06-30",
      "description": "Goal was to convert numbers/integers into the English words for that number, e.g. 1000 -> \"one thousand\"",
      "comment": "It was my first time meddling around with Java, so I \"prototyped\" the solution offline in JavaScript first and then \"adapted\" this to Java. "
    },
    {
      "id": "gdv-extraction",
      "idEH": "2ed404b3-de27-4c67-8a8e-46a4633443c8",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-02",
      "description": "Build a simple parser for some of the fields in the GDV format, a file format used by 'Gesamtverband der Deutschen Versicherungswirtschaft' for exchanging information in Germany's insurance industry.",
      "comment": ""
    },
    {
      "id": "pizza-for-my-friends",
      "idEH": "5d0fe499-4832-4f88-82b6-0a4a57a69fb3",
      "urlEH": "",
      "urlSolution": "pizza-for-my-friends",
      "dateSolved": "2023-07-04",
      "description": "Goal of the challenge was to create two functions: One that matches a list of pizzas with different toppings against a list of persons with certain likes/dislikes.\\nThe other function was essentially the same, but the other way around: Matching a list of persons against a pizza's different toppings, to determine, which persons might like that particular pizza.",
      "comment": "This was promoted as a \"JavaScript (React)\" challenge, but the React part of the challenge was tiny, the more interesting part was the friends/pizza/toppings matching part, which was easily done.\\nI only had a hard time trying to refactor the first non-DRY solution, but I did manage in the end."
    },
    {
      "id": "non-repeating-characters",
      "idEH": "5aa72009-4eda-4e2c-a1b4-ff0f5e6c230f",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-05",
      "description": "Write a function that returns the first letter in a string, which is not repeated in the rest of the string",
      "comment": ""
    },
    {
      "id": "iot-office-sensors",
      "idEH": "1b96364d-e20a-47b7-a302-1bd985add1fd",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-07",
      "description": "Goal was to work with byte data and converting these to integer values, taking care of unsigned/signed differences and different byte lengths",
      "comment": "Interesting look into working with bitshifting and the signed/unsigned topic :-)"
    },
    {
      "id": "change-calculator",
      "idEH": "45514206-0b93-484b-a63c-aab14548a21f",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-11",
      "description": "Goal was to calculate the minimum number of coins required to give out a certain amount of change.",
      "comment": "Quickly recognized the problem to be solveable by a \"best sum\" dynamic programming approach, which I then implemented and also included memoization, to improve performance"
    },
    {
      "id": "state-machine",
      "idEH": "de745794-96d4-43d8-8117-7c345161991e",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-11",
      "description": "Goal was to implement a simple \"State Machine\" that checks the next allowed transitions from state to state. The second part included implementing an IBAN checksum checker, that was used to then control, if the transition to the next state was allowed.",
      "comment": ""
    },
    {
      "id": "storing-vehicle-data",
      "idEH": "91fb6cb8-3fca-4f3b-a368-d576a608ace3",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-14",
      "description": "Challenge consisted of two parts (\"stages\"), which involved working with a SQLite database and storing/retrieving data related to VIN (Vehicle Identification Number) and later also optimizing database file size for \"embedded devices\".",
      "comment": "\"Stage 1\" was easily solved after reading the docs, on how to work with SQLite and Java.\\n\"Stage 2\" was a lot more tricky, as it involved the requirement to minimize the database size – which involved some creative tricks, which Entwicklerheld also hinted at in their description.\\nFirst attempt to save space by splitting up the VIN into its 3 parts (WMI, VDS and VIS) and saving these in separate tables, referencing only the row IDs of the \"less unique\" WMI and VDS parts, did not properly work for this scenario, as the additional page sizes of these tables was inflating the database size quite a bit.\\nI do believe, that in a production environment, splitting it up would be the correct way to go, as the test cases here, were only limited to 999 entries.\\nSecond attempt was then to use a custom character encoding map, as the VIN consist of a `0-9`, `A-Z` - minus the letters `I`, `O`, `Q` -> character set of 33 characters.\\nThis would fit into 6 bits, which I tried to store as BLOB, but unfortunately the smallest size SQLite can save is 1 byte.\\nSo instead went with storing the VIN encoded as integers, which did save enough space for the challenge to go through.\\n"
    },
    {
      "id": "maps-and-polygons",
      "idEH": "3f237f37-6776-4e8b-a12a-378749f3e97f",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-20",
      "description": "Challenge consists of two scenarios:\\n1) Was to calculate the area of a given (irregular) polygon\\n2) Placing a label on a map for each of the given polygons - following certain rules, like e.g. the label not being allowed to touch the polygon and not being allowed to be \"outside\" of the map\\n",
      "comment": "Interesting challenge for me, as I did not really pay any attention during my Maths classes :-).\\nThe first scenario was nevertheless easily solved after finding out about the `Shoelace Algorithm/Formula`, which I just needed to turn into Java code.\\nThe second scenario was the more challenging one, as it involved finding a way to detect \"collisions\" between the label and the polygon and the map borders.\\n"
    },
    {
      "id": "binary-tree",
      "idEH": "47c12f34-a402-4f83-b958-cdcef262a32f",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-07-28",
      "description": "Challenge consisted of working with binary trees and three scenarios:\\n1) Print a binary tree in a 'helpful' way\\n2) Compare and check if two trees are identical\\n3) Reverse/Mirror a given binary tree",
      "comment": "I opted to try to solve the challenge with the use of a JavaScript generator that prints out every next value, Breadth First.\\nThis made a few things more optimal, e.g. the checking of equalness this way can actually return early, if a difference is detected at the current nodes.\\nFor printing the tree I created a helper class that calculates and prints the given treenode values in a 'centered' fashion.\\nUnrelated to the task, I also found a XSS vulnerability in the tasks Tests, which was reported to EntwicklerHeld."
    },
    {
      "id": "rest-api",
      "idEH": "f54f8d24-ff39-47db-a9aa-60f85a280040",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-08-04",
      "description": "Challenge consisted of creating a 'REST' API that handles the different HTTP methods, like `GET`, `POST`, `DELETE`, `PATCH`.",
      "comment": "Having worked with Node.js/Express.js on a few REST-like APIs before, I was used to a certain workflow there, that I was not able to replicate here, due to the constraints of needing to have everything in one class. In a real world example, this would ideally be split into e.g. a routing part, a controller part and a validation step.\\nIt was also a bit interesting to see, how to handle JSON data outside of JavaScript.\\nAnyways my Java solution can be found in the 'IOUApi.java' file.  "
    },
    {
      "id": "fizz-buzz-without-if",
      "idEH": "6b74ccff-00ee-4325-9bc7-b556ab5a10ea",
      "urlEH": "",
      "urlSolution": "fizzbuzz-without-if",
      "dateSolved": "2023-08-07",
      "description": "Well known FizzBuzz challenge, but with a slight constraint of not using 'if' statements :-)",
      "comment": ""
    },
    {
      "id": "keyword-extractor",
      "idEH": "16b518c4-88a0-4b40-9155-bec0c34e2fff",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-08-16",
      "description": "Challenge consisted of extracting 'keywords' from a text, by using 'Term Frequency Inverse Document Frequency (TF-IDF)'",
      "comment": ""
    },
    {
      "id": "document-scan",
      "idEH": "df564e15-d105-4ef9-8e7d-9301b6ee49a9",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-09-03",
      "description": "Challenge consisted of extracting an Address from a scanned document. The scanned document was provided in form of an Array of 'boxed' Characters, e.g. with X/Y points.\\nThe first scenario was the 'easy' mode, which only contained perfectly aligned scans. The challenge allowed for a 'hard' mode, which also included scans, that were not correctly aligned, e.g. the letters were skewed slightly, either going up or down.",
      "comment": "The easy mode was quickly solved, but I went for the 'hard' mode, which was quite a bit more challenging and required to throw away my first solution, that worked for the easy mode. Finally I ended up with a solution that groups the characters in Columns by their X position, then for each value of the first column, iterates through all the other columns to check, if the letter belongs to the same row, by calculating some distances between X/Y of the current and following characters.\\nThere are some issues with the solution still though, if we look at the real world, as e.g. in a wrongly scanned document, the X values of the rows would not be perfectly aligned, which is what the solution currently assumes. It also only works for Left-To-Right and Left-Aligned text."
    },
    {
      "id": "bowling",
      "idEH": "259907f0-9815-4193-9796-7868836042a6",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-09-15",
      "description": "Challenge consisted basically of creating a Bowling Score Counter, that keeps track of the knocked off pins and returns a total score at the end.",
      "comment": ""
    },
    {
      "id": "ip-location-powershell",
      "idEH": "a1d73f9e-8bc4-47ba-b89a-0489bab988fe",
      "urlEH": "",
      "urlSolution": "ip-location-powershell",
      "dateSolved": "2023-10-09",
      "description": "Challenge consisted of creatign a Powershell script that reads IP addresses from a file, sends these to an external IP Lookup service and then output that information as a CSV.",
      "comment": ""
    },
    {
      "id": "run-length-encoding",
      "idEH": "9ed62dfa-54c9-449d-817c-eb1232b11888",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2023-10-19",
      "description": "Challenge consisted of creating a 'Run Length Encoding' function that encodes/compresses a text string.",
      "comment": "I added a small bonus decode function, which is a bit flawed, as it will not work for any run lengths > 9 - maybe to be fixed at a later point."
    },
    {
      "id": "number-conversion",
      "idEH": "8fe211d1-a148-4e41-9ecb-a545ae771e7d",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-02-11",
      "description": "Challenge consisted of creating functions that convert an (unsigned) integer to different base representations.",
      "comment": ""
    },
    {
      "id": "binary-search-js",
      "idEH": "aa3ce6f1-0214-44e7-85f3-894e1d836864",
      "urlEH": "",
      "urlSolution": "binary-search-js",
      "dateSolved": "2024-02-29",
      "description": "Challenge consisted of writing a binary search function that also keeps track of how many 'steps' (or 'iterations') it took to get to the result.",
      "comment": "I opted to go with an iterative solution, that works 'in place' and without copying any array data, but instead works with index ranges for the 'divide and conquer' part :-)"
    },
    {
      "id": "grains",
      "idEH": "b6dfcfc3-c891-4821-acdd-06ef438cec11",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-06",
      "description": "Count the grains of rice on a chessboard at a given field, where the rice grains double with each field.",
      "comment": ""
    },
    {
      "id": "robot-simulator",
      "idEH": "7ac8e1fc-50e9-4bde-88a0-841eb62031c3",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-09",
      "description": "Goal was to implement a simple program that moves a 'robot' in a 2D plane, based on its bearing position",
      "comment": ""
    },
    {
      "id": "word-counter",
      "idEH": "99fca3a7-c250-4058-bd40-c7ff8969ef7d",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-09",
      "description": "Open up a file, read the text, count all the words and their occurence and output it in a nicely formatted way.",
      "comment": ""
    },
    {
      "id": "isbn-verifier",
      "idEH": "81ee7819-f3e6-4d5a-8504-a47784dd8e6e",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-11",
      "description": "Write a function that checks if a supplied string is a valid ISBN number",
      "comment": "First time meddling with Kotlin, did not feel too weird as a language :-)"
    },
    {
      "id": "longest-substring",
      "idEH": "ef5e5add-e449-4ece-9b23-556f54a8587d",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-12",
      "description": "Write a function that finds the longest common substring in two strings",
      "comment": ""
    },
    {
      "id": "client-number-validation",
      "idEH": "901ee122-d2cb-4415-85bd-640470d5e693",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-13",
      "description": "Write a function that validates a 10 digit client number with a parity bit",
      "comment": ""
    },
    {
      "id": "hacking-a-slot-machine",
      "idEH": "6799bb44-e79c-4288-a961-26c9d5fa2fd7",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-17",
      "description": "Change the behaviour of a slot machine to become a bit more 'unfair' after a few special cases",
      "comment": "This should've been easily solved, but the tests cases were a bit weird/illogic, which made life unnecessarily harder:\\nFor phase 3 you are supposed to alter the machine, so that the average payout is lowered significantly, when compared to the default payout rate. A logical approach here would be to calculate some payout average inside the class and use that to alter if the next play(s) result in a win or a loss. However the way the tests are build prevent this: The test creates a snapshot of the slot machine after phase 2 and then calculates its own average, doing 10k runs -> but resetting the state at each iteration back to phase 2. This make it impossible to have a 'built-in' long-term average attribute on the slot-machine class, which would've been a nicer way to handle phase 3."
    },
    {
      "id": "airport-runway-direction",
      "idEH": "9e92453e-9ee8-4497-9c81-11e637012290",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-17",
      "description": "Calculate which runway is closest to the path of an incoming airplane",
      "comment": ""
    },
    {
      "id": "entwicklerheld-celebration",
      "idEH": "b90a83d6-10bf-4881-a53f-464d99cefdfc",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-18",
      "description": "Calculate how many times 'glasses' have clinked at a party",
      "comment": ""
    },
    {
      "id": "filling-area",
      "idEH": "2c898f61-a29f-4804-909a-3fc922d4d842",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-26",
      "description": "Implement an algorithm that 'fills' an area of 0s with 1s",
      "comment": ""
    },
    {
      "id": "fibonacci-numbers",
      "idEH": "f4f0ef8b-0eb5-4c7f-9a5e-9d3da5e35cb9",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-26",
      "description": "Implement an algorithm that return the n-th Fibonacci number",
      "comment": "I went with a recursive solution, and utilized a memo dictionary for memoization purposed, to avoid recalculating the same values again and again"
    },
    {
      "id": "selfies-in-copenhagen",
      "idEH": "e6458744-d7bf-4fa1-8689-ef1643937339",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-27",
      "description": "Implement some Django Webframework related functions that a) get a list of data of a predefined model and b) allow to add a rating of said data, and return some average statistics",
      "comment": "First time working with Django and its ORM and I seem to like raw SQL queries a bit better than the ORM ;-)"
    },
    {
      "id": "ancient-encryption",
      "idEH": "fb03fb21-9f44-4fe1-bf42-c4122aa94ddb",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-03-28",
      "description": "Implement a class the can encode and decode Vigenère cipher",
      "comment": ""
    },
    {
      "id": "prime-test",
      "idEH": "e7a80358-ac1e-47a4-b865-db6882cc5dfa",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-03",
      "description": "Implement a program that checks, if a given number is a prime number",
      "comment": ""
    },
    {
      "id": "circuit-breaker",
      "idEH": "e62e5e61-b223-4fd7-a9f2-46b7f596dc88",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-05",
      "description": "Implement a circuit breaker pattern, that prevents function executions, via timeouts, if previous attempts failed",
      "comment": "Initially attempted to solve this by using some timers that self-reset, whenever the timeouts are over. It would've worked, and that solution would've been a bit more elegant, but unfortunately the way the EH tests were constructed, this was not possible: The tests do not *actually* wait x seconds before re-trying to call the function in the circuit-breaker, *but* they are 'faking' the passed time, by passing modified currentDates as parameter. :-("
    },
    {
      "id": "filling-area-hard-mode",
      "idEH": "24571ac0-24a9-48da-bffe-f56f55852421",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-07",
      "description": "Implement an algorithm that detects 'connected' areas of 0s with 1s and fills these area with 1s",
      "comment": "I have added some additional difficulty here for myself, by also requiring 'multiple' boxes to be filled, if they are in the area. The original EH task only was testing for single boxes."
    },
    {
      "id": "meter-readings",
      "idEH": "9a265ddd-3e2f-4437-8f38-a2d13580a5cc",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-09",
      "description": "Implement a simple parser and validator for a CSV file containing meter readings",
      "comment": "Stage 1 allowed usage of the fgetcsv method, while in Stage 2 that method was not allowed – however replacing it was not too much of a challenge."
    },
    {
      "id": "sportly-webapp-getting-started",
      "idEH": "be3cf556-eb65-4692-9fc8-64a4d8637c8c",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-13",
      "description": "Implement a basic Laravel controller for an 'app'",
      "comment": "First time using Laravel, and it felt a bit weird, when compared to express.js, what I am used to. Interesting experience though."
    },
    {
      "id": "easy-storage",
      "idEH": "5e7e77a6-0243-43c9-bfa3-fa3637575fab",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-15",
      "description": "Implement a program that helps 'store' items in repositories.",
      "comment": "Just required some very basic HashMap related methods"
    },
    {
      "id": "candidates",
      "idEH": "b4c43bf0-efcf-4359-a8fb-4fd7df66269e",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-15",
      "description": "Efficiently pair list of job offers with a list of possible candidates and select the best matching candidates.",
      "comment": ""
    },
    {
      "id": "santas-cookies",
      "idEH": "322fa320-1f4d-4f2b-a083-ab26e280803b",
      "urlEH": "santas-cookie-finder-magic",
      "urlSolution": "santas-cookies",
      "dateSolved": "2024-04-18",
      "description": "With a given 2D array of strings, consisting of spaces or '*' ( with '*' representing a 'cookie') -> return an updated array of strings, where the spaces are replaced by a number representing, how many cookies the empty space has in its adjacency.",
      "comment": ""
    },
    {
      "id": "message-distribution-network",
      "idEH": "d94c9e99-3fc1-4fa2-91ce-beb4d847bb06",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-19",
      "description": "Send incoming messages to the correct Kafka topic, after detecting the language of the message. Additionally send a POST message to a server, if the message contains certain keywords.",
      "comment": "This was relatively easy, not sure why this was originally ranked as a 'Medium' level task."
    },
    {
      "id": "vendors-box",
      "idEH": "95836bbc-ea60-4783-8079-fb1197abefff",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-21",
      "description": "Filter a list of Vendors for the best matching vendor in regards to price, shipping time, etc.",
      "comment": ""
    },
    {
      "id": "windshield-wiper-check",
      "idEH": "d624fbac-b501-4d20-a157-4d1edb6acf88",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-24",
      "description": "Execute code tests coming from a NATS message broker and reply back with the test results",
      "comment": ""
    },
    {
      "id": "insurance-matcher",
      "idEH": "81cf6eb8-ca8f-46dd-a3fb-d008537dd962",
      "urlEH": "insurance-matching",
      "urlSolution": "insurance-matcher",
      "dateSolved": "2024-04-27",
      "description": "Find the best match insurance based on user's preferences",
      "comment": ""
    },
    {
      "id": "emoji-bot",
      "idEH": "82ee47f5-36f9-4b61-8b1b-3aab8eca0ea5",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-27",
      "description": "Process messages that may or may not contain emojis, and store them in a Redis instance",
      "comment": ""
    },
    {
      "id": "gps-navigation",
      "idEH": "05510bdc-d255-4776-b182-f352f74c50b1",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-28",
      "description": "Implement a trilateration method, which uses satellites to calculate the position of the car.",
      "comment": "Very 'geometrical' task, for which I needed to get some inspiration from people with better Math/Geometry skills :-)"
    },
    {
      "id": "weigh-the-slow-loris",
      "idEH": "50c10b58-9a4f-4c86-abdd-32d81551d5ac",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-29",
      "description": "Write an algorithm which receives a target weight and some available masses, and then returns a valid combination of these masses",
      "comment": "Classic 'howSum' or 'bestSum' problem. Here I reused my solution from the 'change-calculator' task, which was essentially identical."
    },
    {
      "id": "page-wrapping",
      "idEH": "e6596dad-510d-42a5-ae54-313a6d092e3e",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-04-30",
      "description": "Write a pagination feature, splitting text content into pages, based on content height, and add a ToC based on present H1-H3 headings",
      "comment": "Bit of a weird challenge description, which was not really helpful in figuring out, what the task really expects you to do."
    },
    {
      "id": "markdown-parser-refactoring",
      "idEH": "3f07f810-d35c-47f2-b40b-0b361f0c8203",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-05-09",
      "description": "Refactor a Class that parses Markdown formatted text into HTML tags, where the current version contained some bugs",
      "comment": ""
    },
    {
      "id": "sportly-webapp-add-the-leaderboard",
      "idEH": "fe7b8b35-1e38-458c-bdb0-77a66dccd444",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-05-15",
      "description": "Create a leaderboard for a webapp that tracks sports activities",
      "comment": "First time using Symfony and I find the ORM a bit weird to use in comparison to straight SQL, so I went with using a DQL query with Doctrine ORM here."
    },
    {
      "id": "armstrong-numbers",
      "idEH": "a8cf39d4-0637-4ce2-b774-0be832336052",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-05-17",
      "description": "Check if the provided number is an 'Armstrong Number'",
      "comment": ""
    },
    {
      "id": "armstrong-numbers-java",
      "idEH": "bb1012f8-8aa3-4531-b769-5d310c27c0da",
      "urlEH": "armstrong-numbers",
      "urlSolution": "armstrong-numbers-java",
      "dateSolved": "2024-05-17",
      "description": "Check if the provided number is an 'Armstrong Number'",
      "comment": ""
    },
    {
      "id": "armstrong-numbers-python",
      "idEH": "2f03dc32-87a7-4465-a401-15d27929d5ca",
      "urlEH": "armstrong-numbers",
      "urlSolution": "armstrong-numbers-python",
      "dateSolved": "2024-05-17",
      "description": "Check if the provided number is an 'Armstrong Number'",
      "comment": ""
    },
    {
      "id": "armstrong-numbers-csharp",
      "idEH": "8c7cbb35-01b1-4a10-85f8-49e5e62e3c69",
      "urlEH": "armstrong-numbers",
      "urlSolution": "armstrong-numbers-csharp",
      "dateSolved": "2024-05-17",
      "description": "Check if the provided number is an 'Armstrong Number'",
      "comment": ""
    },
    {
      "id": "luhn-checksum",
      "idEH": "24cc388d-376f-433a-abbc-c0334cdc7e9c",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-05-17",
      "description": "Check if the provided number is a valid Luhn Number",
      "comment": ""
    },
    {
      "id": "tickets-for-the-city-tower",
      "idEH": "50872c32-a42f-4251-9bfd-5b49b6e57f45",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-05-19",
      "description": "Use Symfony to create (a small part of) a 'ticket ordering' webapp",
      "comment": ""
    },
    {
      "id": "allergies",
      "idEH": "e274e324-a189-45f6-9607-741e1188a7d2",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-05-19",
      "description": "Determine if a given allergen is present in a person's allergy score.",
      "comment": "After reading up on Bitmasks and how to use them, this was easily solvable :-)"
    },
    {
      "id": "christmas-tree-of-hanoi",
      "idEH": "26a2682d-a536-42e7-8c17-50031cb079bd",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-05-22",
      "description": "Write a function that captures all needed moves to solve the 'Christmas Trees of Hanoi' (better know as 'Towers of Hanoi') problem.",
      "comment": ""
    },
    {
      "id": "new-spaceship-validation",
      "idEH": "f2e99daa-133a-4b9a-b1d8-bb6cdc587b8b",
      "urlEH": "new-spaceship-validation-when-entering-the-motherships",
      "urlSolution": "new-spaceship-validation",
      "dateSolved": "2024-05-22",
      "description": "Validate incoming ship IDs and return JSON repsonses with Java Spring Boot",
      "comment": "That was surprisingly easy, not sure, why this one was rated as 'medium' difficulty and only has comparatively low success rates"
    },
    {
      "id": "handle-the-shopping-cart",
      "idEH": "9a0f5fe6-1186-49bd-963f-78e25acff3f7",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-06-05",
      "description": "Implement a shopping cart feature and a very simple recommendation engine",
      "comment": "The recommendation part should've been separate classes, it feels weird to have them in the same file as the CartService, but there was no way to make it work on EntwicklerHeld platform otherwise"
    },
    {
      "id": "doubly-linked-list",
      "idEH": "911431cd-505c-4cf0-aaaf-c9d79529e04b",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-06-06",
      "description": "Implement the pop, push, shift and unshift methods of a doubly linked list",
      "comment": ""
    },
    {
      "id": "camelcase-to-snakecase",
      "idEH": "c662143b-407f-4533-8008-e7907160979a",
      "urlEH": "camelcase-to-snake_case",
      "urlSolution": "camelcase-to-snakecase",
      "dateSolved": "2024-06-06",
      "description": "Rename all keys of a given map from camelCase to snake_case",
      "comment": ""
    },
    {
      "id": "resistor-color-trio",
      "idEH": "e61ea27f-85b2-4d00-97e4-7eb0e1fcd25f",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-06-07",
      "description": "Create a resistance color decoder that return a formatted string",
      "comment": ""
    },
    {
      "id": "knapsack",
      "idEH": "a404ba77-ad2b-4b12-9046-d6ceed35e7a5",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-06-08",
      "description": "Try to pack a bag as 'efficient' as possible based on certain weighted critera",
      "comment": ""
    },
    {
      "id": "life-insurance",
      "idEH": "5a3402e8-1afb-457b-8b84-4a6c591262b1",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-06-09",
      "description": "Calculate payout amounts for a life insurance taking into account different surcharges based on user's risk groups",
      "comment": ""
    },
    {
      "id": "make-the-world-a-better-place",
      "idEH": "6e348d15-c061-4eb7-b7dc-088bbfe1c1b0",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-06-12",
      "description": "Create a simple Test Runner/Framework",
      "comment": "Interesting insight into working with Java's Reflections and Annotations"
    },
    {
      "id": "chatgpt-whatsapp-bot",
      "idEH": "a4fed36d-0cde-4453-a2de-5f96ede01f16",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-06-13",
      "description": "Create a simple 'WhatsApp Bot' using Twilio to get replies from ChatGPT'",
      "comment": ""
    },
    {
      "id": "lottery-sim",
      "idEH": "3fcb497e-53a2-4566-87bf-57cbf0ff03ac",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-06-14",
      "description": "Simulate a simple lottery",
      "comment": "Submitted under time pressure, to be the first one to submit, after challenge goes online, and successfully managed to do so :-)"
    },
    {
      "id": "patricia-trie",
      "idEH": "5d7468b7-5abc-4f37-8a41-e5baf2f774e4",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-06-15",
      "description": "Implement insert, search and delete of words into a Patricia Trie",
      "comment": "Interesting challenga, where the tests were a bit too lax -> i.e. they also allowed solutions, where the orphaned nodes were not deleted, which IMHO shouldn't be accepted"
    },
    {
      "id": "string-calculation",
      "idEH": "eed5ed77-baad-455d-89ce-7d44f365a631",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-06-25",
      "description": "Implement a parser that does calculations based on the input string",
      "comment": "Went with a RegExp Matching Groups based solution - there probably are more simpler solutions though"
    },
    {
      "id": "analyse-the-plant",
      "idEH": "2b93cfa7-5495-4a0f-96fc-a4c4b57a9f33",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-07-05",
      "description": "Challenge that dives into the world of workcenters, jobs, tasks. Consisting of two Stages: \\\\n1) Required the implementation of a visual representation of tasks on a workcenter.\\\\n2) Required the implementation of an optimized job/task schedule across the two workcenters, by using the Johnson's Rules method.",
      "comment": ""
    },
    {
      "id": "a-small-dumb-chatbot",
      "idEH": "69015cfc-c452-4a09-96dd-e1b73c062f5b",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-07-09",
      "description": "Create a a small dumb chatbot",
      "comment": ""
    },
    {
      "id": "high-scores",
      "idEH": "4b07b532-222f-48fe-91f1-8c742afc5e4e",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2024-12-08",
      "description": "Work with a list of scores from multiple gaming sessions to extract meaningful data, such as the latest score, the personal best, and the top three scores.",
      "comment": ""
    },
    {
      "id": "emojis",
      "idEH": "060352c1-1c5f-4b01-aefc-27877293b71b",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2025-08-03",
      "description": "Convert emoji codes like :happy: into HTML – but only if they’re valid!",
      "comment": ""
    },
    {
      "id": "fair-share",
      "idEH": "12b7b642-ae5e-4e70-ae42-53e8d6a2d4aa",
      "urlEH": "",
      "urlSolution": "",
      "dateSolved": "2025-08-03",
      "description": "Fair Share – Who Pays What?You've been out with friends, and everyone paid for different activities. Now it's time to settle the costs fairly! Who overpaid? Who still owes money?Get ready to bring balance to shared payments!",
      "comment": ""
    }
  ]
}

